BEGIN TRANSACTION;

/* Considera-se para todas as tabelas que seus nomes são os mesmos das relações no modelo relacional, 
a fim de garantir a correspondência e facilitar a correção com um script mais limpo com somente as
justificativas que realmente são necessárias. */

/* O Postgresql não permite que chaves primárias sejam nulas, assim fica implícito que
todas as chaves primárias não podem ser nulas. */

/* Abreviou-se operador como op para simplificar leitura e programação. */

/* Os RESTRICTS nas ações de ON DELETE foram majoritariamente necessários para garantir 
que o histórico da aplicação seja mantido. */

CREATE TABLE FUNCIONARIO(
	CPF CHAR(14),
	NOME VARCHAR(128) NOT NULL,
	RG VARCHAR(14) NOT NULL,
	ENDERECO VARCHAR(128) NOT NULL,
	CARGO VARCHAR(10) NOT NULL,
	EQUIPE VARCHAR(64),
	TEL1 VARCHAR(20) NOT NULL,
	TEL2 VARCHAR(20),
	CONSTRAINT PK_FUNCIONARIO
		PRIMARY KEY(CPF),
	CONSTRAINT CK1_FUNCIONARIO /* Valida o formato do cpf. */
		CHECK(CPF ~ '^[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}$'),
	CONSTRAINT CK2_FUNCIONARIO 
		CHECK(UPPER(CARGO) IN ('PILOTO', 'COPILOTO', 'ASSISTENTE', 'TECNICO', 'OPCAMERA'))
);

CREATE TABLE TECNICO(
	CPF CHAR(14),
	ESPECIALIDADE VARCHAR(64) NOT NULL,
	CONSTRAINT PK_TECNICO
		PRIMARY KEY(CPF),
	CONSTRAINT FK_TECNICO
		FOREIGN KEY(CPF)
		REFERENCES FUNCIONARIO
		ON DELETE CASCADE
);

CREATE TABLE COPILOTO(
	CPF CHAR(14),
	HABILITACAO CHAR(12) NOT NULL, /* Exemplo: PP-224511425 (ANAC). */
	CONSTRAINT PK_COPILOTO
		PRIMARY KEY(CPF),
	CONSTRAINT UN_COPILOTO /* Habilitação deve ser única para cada copiloto. */
		UNIQUE(HABILITACAO),
	CONSTRAINT FK_COPILOTO
		FOREIGN KEY(CPF)
		REFERENCES FUNCIONARIO
		ON DELETE CASCADE
);

CREATE TABLE PILOTO(
	CPF CHAR(14),
	HABILITACAO CHAR(12) NOT NULL, /* Exemplo: PP-224511425 (ANAC). */
	CONSTRAINT PK_PILOTO
		PRIMARY KEY(CPF),
	CONSTRAINT UN_PILOTO /* Habilitação deve ser única para cada copiloto. */
		UNIQUE(HABILITACAO),
	CONSTRAINT FK_PILOTO
		FOREIGN KEY(CPF)
		REFERENCES FUNCIONARIO
		ON DELETE CASCADE
);

CREATE TABLE ASSISTENTE(
	CPF CHAR(14),
	CONSTRAINT PK_ASSISTENTE
		PRIMARY KEY(CPF),
	CONSTRAINT FK_ASSISTENTE
		FOREIGN KEY(CPF)
		REFERENCES FUNCIONARIO
		ON DELETE CASCADE
);

CREATE TABLE OPCAMERA(
	CPF CHAR(14),
	INICIOCARREIRA DATE NOT NULL,
	CONSTRAINT PK_OPCAMERA
		PRIMARY KEY(CPF),
	CONSTRAINT FK_OPCAMERA
		FOREIGN KEY(CPF)
		REFERENCES FUNCIONARIO
		ON DELETE CASCADE
);

CREATE TABLE EQUIPAMENTO(
	ID BIGSERIAL,
	MODELO VARCHAR(32) NOT NULL,
	NOME VARCHAR(64) NOT NULL,
	QUANTIDADE INTEGER NOT NULL,
	MARCA VARCHAR(32), 
	DESCRICAO VARCHAR, /* Sem especificar o tamanho ele é interpretado como TEXT pelo Postgresql. */
	TIPO VARCHAR(12) NOT NULL,
	CONSTRAINT PK_EQUIPAMENTO
		PRIMARY KEY(ID),
	CONSTRAINT UN_EQUIPAMENTO
		UNIQUE(MODELO, NOME),
	CONSTRAINT CK1_EQUIPAMENTO
		CHECK(UPPER(TIPO) IN ('DRONE', 'CAMERA', 'ESTRUTURACAO', 'SONORIZACAO')),
	CONSTRAINT CK2_EQUIPAMENTO /* Pode não haver mais unidades do equipamento no estoque, >= 0 pelo histórico. */
		CHECK(QUANTIDADE >= 0)
);

CREATE TABLE ESTRUTURACAO(
	ID BIGINT,
	CONSTRAINT PK_ESTRUTURACAO
		PRIMARY KEY(ID),
	CONSTRAINT FK_ESTRUTURACAO
		FOREIGN KEY(ID)
		REFERENCES EQUIPAMENTO
		ON DELETE CASCADE
);

CREATE TABLE DRONE(
	ID BIGINT,
	FONTEALIMENTACAO VARCHAR(32), 
	TEMPOMAXVOO INTEGER, /* Em minutos. */
	ALCANCEREMOTO INTEGER, /* Em metros. */
	CONSTRAINT PK_DRONE
		PRIMARY KEY(ID),
	CONSTRAINT FK_DRONE
		FOREIGN KEY(ID)
		REFERENCES EQUIPAMENTO
		ON DELETE CASCADE,
	CONSTRAINT CK1_DRONE /* Deve ser no mínimo > 0. */
		CHECK(TEMPOMAXVOO > 0),
	CONSTRAINT CK2_DRONE /* Deve ser no mínimo > 0. */
		CHECK(ALCANCEREMOTO > 0)
);

CREATE TABLE SONORIZACAO(
	ID BIGINT,
	POTENCIA INTEGER, /* Em watts. */
	POSSEEISE BOOLEAN NOT NULL,
	CONSTRAINT PK_SONORIZACAO
		PRIMARY KEY(ID),
	CONSTRAINT FK_SONORIZACAO
		FOREIGN KEY(ID)
		REFERENCES EQUIPAMENTO
		ON DELETE CASCADE,
	CONSTRAINT CK_SONORIZACAO /* Deve ser no mínimo > 0. */
		CHECK(POTENCIA > 0)
);

CREATE TABLE CAMERA(
	ID BIGINT,
	FONTEALIMENTACAO VARCHAR(32), /* Bateria, cabo, pilha, etc... */
	CERTIFICACAOIP VARCHAR(6), /* Pode ser: IP29K, IP291K, IP29. */
	RESISTENTEQUEDA BOOLEAN DEFAULT FALSE,
	VISAONOTURNA BOOLEAN DEFAULT FALSE,
	ZOOMLONGOALCANCE BOOLEAN DEFAULT FALSE,
	ESTABILIZADORIMAGEM BOOLEAN DEFAULT FALSE,
	CONECTIVIDADE VARCHAR(32), /* Wi-Fi, cabo, bluetooth, nfc, etc... */
	CONSTRAINT PK_CAMERA
		PRIMARY KEY(ID),
	CONSTRAINT FK_CAMERA
		FOREIGN KEY(ID)
		REFERENCES EQUIPAMENTO
		ON DELETE CASCADE,
	CONSTRAINT CK_CAMERA
		/* Deve ter 2 ou 3 dígitos em sequencia e talvez terminar com uma letra. */
		CHECK(CERTIFICACAOIP ~ '^IP[0-9]{2,3}[A-ZA-Z]{0,1}$')
);

CREATE TABLE REGISTROS(
	IDDRONE BIGINT,
	REGISTRO CHAR(9), /* São 9 dígitos pela SISANT. */ 
	CONSTRAINT PK_REGISTROS
		PRIMARY KEY(REGISTRO),
	CONSTRAINT FK_REGISTROS
		FOREIGN KEY(IDDRONE)
		REFERENCES DRONE
		ON DELETE RESTRICT /* O usuário deve retirar os registros antes de deletar um drone. */
);

CREATE TABLE CAMERAAEREA(
	CAMERA BIGINT,
	DRONE BIGINT,
	DATA DATE,
	QUANTIDADE INTEGER NOT NULL,
	CONSTRAINT PK_CAMERAAEREA
		PRIMARY KEY(CAMERA, DRONE, DATA),
	CONSTRAINT FK1_CAMERAAEREA
		FOREIGN KEY(CAMERA)
		REFERENCES CAMERA
		ON DELETE RESTRICT, /* Para guardar histórico. */
	CONSTRAINT FK2_CAMERAAEREA
		FOREIGN KEY(DRONE)
		REFERENCES DRONE
		ON DELETE RESTRICT, /* Para guardar histórico. */
	CONSTRAINT CK_CAMERAAEREA /* Pelo menos uma câmera deve ser instalada. */
		CHECK(QUANTIDADE > 0)
);

CREATE TABLE MUSICO(
	CPF CHAR(14),
	NOME VARCHAR(128) NOT NULL,
	CONSTRAINT PK_MUSICO
		PRIMARY KEY(CPF),
	CONSTRAINT CK_MUSICO
		CHECK(CPF ~ '^[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}$')
);

CREATE TABLE BANDA(
	NOME VARCHAR(64),
	DATACRIACAO DATE,
	ESTILOMUSICAL VARCHAR(64),
	TIPO CHAR(10) NOT NULL,
	CONSTRAINT PK_BANDA
		PRIMARY KEY(NOME, DATACRIACAO),
	CONSTRAINT CK_BANDA
		CHECK(UPPER(TIPO) IN ('PARTICULAR', 'CONTRATADA'))
);

CREATE TABLE COMPOE(
	CPFMUSICO CHAR(14),
	NOMEBANDA VARCHAR(64),
	DATACRIACAOBANDA DATE,
	CONSTRAINT PK_COMPOE
		PRIMARY KEY(CPFMUSICO, NOMEBANDA, DATACRIACAOBANDA),
	CONSTRAINT FK1_COMPOE
		FOREIGN KEY(CPFMUSICO)
		REFERENCES MUSICO
		ON DELETE RESTRICT, /* Não é para deletar essas informações. */
	CONSTRAINT FK2_COMPOE
		FOREIGN KEY(NOMEBANDA, DATACRIACAOBANDA)
		REFERENCES BANDA
		ON DELETE RESTRICT /* Não é para deletar essas informações. */
);

CREATE TABLE FESTANOCRUZEIRO(
	IMO INTEGER, /* Exemplo IMO: 9710880, 1009613, 8852356. */
	DATAINICIO DATE,
	DATAFIM DATE NOT NULL,
	NUMEROCONVIDADOS INTEGER NOT NULL,
	NOME VARCHAR(128) NOT NULL,
	CONSTRAINT PK_FESTANOCRUZEIRO
		PRIMARY KEY(IMO, DATAINICIO),
	CONSTRAINT CK1_FESTANOCRUZEIRO /* Ao menos um convidado deve ter. */
		CHECK(NUMEROCONVIDADOS > 1)--,
	--CONSTRAINT CK2_FESTANOCRUZEIRO /* Data de início de uma festa não pode ser posterior a data de fim. */
	--	CHECK(DATAINICIO < DATAFIM)
);

CREATE TABLE LOCAISCRUZEIRO(
	IMO INTEGER,
	DATAFESTA DATE,
	LOCAL VARCHAR(128),
	CONSTRAINT PK_LOCAISCRUZEIRO
		PRIMARY KEY(IMO, DATAFESTA, LOCAL),
	CONSTRAINT FK_LOCAISCRUZEIRO
		FOREIGN KEY(IMO, DATAFESTA)
		REFERENCES FESTANOCRUZEIRO
		ON DELETE RESTRICT /* Para armazenar histórico. */
);

CREATE TABLE SHOW(
	ID BIGSERIAL,
	IMO INTEGER NOT NULL,
	DATAFESTA DATE NOT NULL,
	NOMEBANDA VARCHAR(64) NOT NULL,
	DATACRIACAOBANDA DATE NOT NULL,
	DATA DATE NOT NULL,
	HORAINICIO TIME NOT NULL,
	TERMINOPREVISTO TIMESTAMP, /* TIMESTAMP guarda hora e data. */
	CONTRATO VARCHAR(64), /* Pode ser nulo pois bandas particulares não tem contrato. */
	CONSTRAINT PK_SHOW
		PRIMARY KEY(ID),
	CONSTRAINT UN1_SHOW /* As bandas não se repetem na festa. */
		UNIQUE(IMO, DATAFESTA, NOMEBANDA, DATACRIACAOBANDA),
	CONSTRAINT UN2_SHOW /* Contrato deve ser único para cada show. */
		UNIQUE(CONTRATO),
	CONSTRAINT FK1_SHOW
		FOREIGN KEY(IMO, DATAFESTA)
		REFERENCES FESTANOCRUZEIRO
		ON DELETE RESTRICT, /* Histórico. */
	CONSTRAINT FK2_SHOW
		FOREIGN KEY(NOMEBANDA, DATACRIACAOBANDA)
		REFERENCES BANDA
		ON DELETE RESTRICT /* Histórico. */
);

CREATE TABLE UTILIZA(
	SHOWID BIGINT,
	SONORIZACAOID BIGINT,
	CONSTRAINT PK_UTILIZA
		PRIMARY KEY(SHOWID, SONORIZACAOID),
	CONSTRAINT FK1_UTILIZA
		FOREIGN KEY(SHOWID)
		REFERENCES SHOW
		ON DELETE RESTRICT, /* Histórico. */
	CONSTRAINT FK2_UTILIZA
		FOREIGN KEY(SONORIZACAOID)
		REFERENCES SONORIZACAO
		ON DELETE RESTRICT /* Histórico. */
);

CREATE TABLE OPCOMCAMERA(
	CPFOPCAMERA CHAR(14),
	DATA DATE,
	CAMERA BIGINT NOT NULL,
	TIPO VARCHAR(12) NOT NULL,
	CONSTRAINT PK_OPCOMCAMERA
		PRIMARY KEY(CPFOPCAMERA, DATA),
	CONSTRAINT FK_OPCOMCAMERA
		FOREIGN KEY(CPFOPCAMERA)
		REFERENCES OPCAMERA
		ON DELETE RESTRICT, /* Histórico. */ 
	CONSTRAINT CK_OPCOMCAMERA
		CHECK(UPPER(TIPO) IN ('PARQUE', 'FOTOGRAFO', 'CINEGRAFISTA'))
);

CREATE TABLE FOTOGRAFOCRUZEIRO(
	CPFOPCAMERA CHAR(14),
	DATA DATE,
	CATEGORIA VARCHAR(12) NOT NULL,
	IMOFESTA INTEGER NOT NULL,
	DATAFESTA DATE NOT NULL,		
	CONSTRAINT PK_FOTOGRAFOCRUZEIRO
		PRIMARY KEY(CPFOPCAMERA, DATA),
	CONSTRAINT FK1_FOTOGRAFOCRUZEIRO
		FOREIGN KEY(CPFOPCAMERA, DATA)
		REFERENCES OPCOMCAMERA
		ON DELETE RESTRICT, /* Histórico. */	
	CONSTRAINT FK2_FOTOGRAFOCRUZEIRO /* Festa em que irá trabalhar. */
		FOREIGN KEY(IMOFESTA, DATAFESTA)
		REFERENCES FESTANOCRUZEIRO
		ON DELETE RESTRICT,	/* Histórico. */
	CONSTRAINT CK1_FOTOGRAFOCRUZEIRO
		CHECK(UPPER(CATEGORIA) IN ('ESPECIALISTA', 'TECNICO', 'JUNIOR'))--,
	--CONSTRAINT CK2_FOTOGRAFOCRUZEIRO
	--	CHECK(DATA = DATAFESTA) /* Checa se a data em que irá trabalhar é a data da festa. */
);

CREATE TABLE CINEGRAFISTACRUZEIRO(
	CPFOPCAMERA CHAR(14),
	DATA DATE,	
	IMOFESTA INTEGER NOT NULL,
	DATAFESTA DATE NOT NULL,
	CONSTRAINT PK_CINEGRAFISTACRUZEIRO
		PRIMARY KEY(CPFOPCAMERA, DATA),
	CONSTRAINT FK1_CINEGRAFISTACRUZEIRO
		FOREIGN KEY(CPFOPCAMERA, DATA)
		REFERENCES OPCOMCAMERA
		ON DELETE RESTRICT, /* Histórico. */	
	CONSTRAINT FK2_CINEGRAFISTACRUZEIRO /* Festa em que irá trabalhar. */
		FOREIGN KEY(IMOFESTA, DATAFESTA)
		REFERENCES FESTANOCRUZEIRO
		ON DELETE RESTRICT--, /* Histórico. */	
	--CONSTRAINT CK_CINEGRAFISTACRUZEIRO
	--	CHECK(DATA = DATAFESTA) /* Checa se a data em que irá trabalhar é a data da festa. */
);

CREATE TABLE PARQUE(
	CNPJ CHAR(18), /* Exemplo: 07.414.674/0001-81. */
	NOME VARCHAR(64) NOT NULL,
	MAPAFILEPATH VARCHAR(128) NOT NULL,
	ENDERECO VARCHAR(128) NOT NULL,
	CONSTRAINT PK_PARQUE
		PRIMARY KEY(CNPJ),
	CONSTRAINT CK_PARQUE
		CHECK(CNPJ ~ '^[0-9]{2}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}\-[0-9]{2}$')
);

CREATE TABLE FESTANOPARQUE(
	CNPJPARQUE CHAR(18),
	DATAINICIO DATE,
	DATAFIM DATE NOT NULL,
	NUMEROCONVIDADOS INTEGER NOT NULL,
	NOME VARCHAR(64) NOT NULL,
	CONSTRAINT PK_FESTANOPARQUE
		PRIMARY KEY(CNPJPARQUE, DATAINICIO),
	CONSTRAINT FK_FESTANOPARQUE
		FOREIGN KEY(CNPJPARQUE)
		REFERENCES PARQUE
		ON DELETE RESTRICT,
	CONSTRAINT CK1_FESTANOPARQUE /* Ao menos um convidado deve ter. */
		CHECK(NUMEROCONVIDADOS > 0)--,
	--CONSTRAINT CK2_FESTANOPARQUE /* Data de início de uma festa não pode ser posterior a data de fim. */
	--	CHECK(DATAINICIO < DATAFIM)
);

CREATE TABLE ATRACAO(
	CNPJPARQUE CHAR(18),
	DATAFESTA DATE,
	NUMERO INTEGER,
	NOME VARCHAR(64),
	POLIGONO INTEGER[10][3] NOT NULL, /* Um polígono com no máximo 10 pontos. */
	CONSTRAINT PK_ATRACAO
		PRIMARY KEY(CNPJPARQUE, DATAFESTA, NUMERO, NOME),
	CONSTRAINT FK_ATRACAO
		FOREIGN KEY(CNPJPARQUE, DATAFESTA)
		REFERENCES FESTANOPARQUE
		ON DELETE RESTRICT,
	CONSTRAINT CK_ATRACAO /* Atração deve ter um número positivo. */
		CHECK(NUMERO > 0)
);

CREATE TABLE OPPARQUE(
	CPFOPCAMERA CHAR(14),
	DATA DATE,
	IDCAMERASECUNDARIA BIGINT,
	CNPJPARQUE CHAR(18) NOT NULL,
	DATAINICIOPARQUE DATE NOT NULL,
	CPFASSISTENTE CHAR(14) NOT NULL,
	CONSTRAINT PK_OPPARQUE
		PRIMARY KEY(CPFOPCAMERA, DATA, IDCAMERASECUNDARIA),
	CONSTRAINT UN_OPPARQUE
		UNIQUE(CNPJPARQUE, DATAINICIOPARQUE, CPFASSISTENTE),
	CONSTRAINT FK1_OPPARQUE
		FOREIGN KEY(CPFOPCAMERA, DATA)
		REFERENCES OPCOMCAMERA
		ON DELETE RESTRICT,
	CONSTRAINT FK2_OPPARQUE
		FOREIGN KEY(IDCAMERASECUNDARIA)
		REFERENCES CAMERA
		ON DELETE RESTRICT,
	CONSTRAINT FK3_OPPARQUE
		FOREIGN KEY(CNPJPARQUE, DATAINICIOPARQUE)
		REFERENCES FESTANOPARQUE
		ON DELETE RESTRICT,
	CONSTRAINT FK4_OPPARQUE
		FOREIGN KEY(CPFASSISTENTE)
		REFERENCES ASSISTENTE
		ON DELETE RESTRICT--,
	--CONSTRAINT CK_OPPARQUE
	--	CHECK(DATA = DATAINICIOPARQUE) /* Checa se a data em que irá trabalhar é a data da festa. */
);

CREATE TABLE PONTOINSTALACAO(
	CNPJPARQUE CHAR(18),
	COORDENADAS INTEGER[3],
	DESCRICAO VARCHAR, /* Quando não se especifíca o tamanho assume-se que seja TEXT. */
	CONECTIVIDADE VARCHAR(32),
	ILUMINACAO CHAR(5),
	CONTATOAGUA BOOLEAN,
	FONTEALIMENTACAO VARCHAR(32),
	CONSTRAINT PK_PONTOINSTALACAO
		PRIMARY KEY(CNPJPARQUE, COORDENADAS),
	CONSTRAINT FK_PONTOINSTALACAO
		FOREIGN KEY(CNPJPARQUE)
		REFERENCES PARQUE
		ON DELETE RESTRICT,
	CONSTRAINT CK_PONTOINSTALACAO
		CHECK(UPPER(ILUMINACAO) IN ('ALTA', 'MEDIA', 'BAIXA'))
);

CREATE TABLE PONTOCAMERA(
	IDCAMERA BIGINT,
	CNPJPARQUE CHAR(18),
	COORDENADAS INTEGER[3],
	DATA DATE,
	QUANTIDADE INTEGER NOT NULL,
	CONSTRAINT PK_PONTOCAMERA
		PRIMARY KEY(IDCAMERA, CNPJPARQUE, COORDENADAS, DATA),
	CONSTRAINT FK1_PONTOCAMERA
		FOREIGN KEY(IDCAMERA)
		REFERENCES CAMERA
		ON DELETE RESTRICT,
	CONSTRAINT FK2_PONTOCAMERA
		FOREIGN KEY(CNPJPARQUE, COORDENADAS)
		REFERENCES PONTOINSTALACAO
		ON DELETE RESTRICT,
	CONSTRAINT CK_PONTOCAMERA /* Ao menos uma câmera deve ter sido instalada. */
		CHECK(QUANTIDADE > 0)
);

CREATE TABLE PONTOESTRUTURA(
	IDESTRUTURACAO BIGINT,
	CNPJPARQUE CHAR(18),
	COORDENADAS INTEGER[3],
	DATA DATE,
	QUANTIDADE INTEGER NOT NULL,
	CONSTRAINT PK_PONTOESTRUTURA
		PRIMARY KEY(IDESTRUTURACAO, CNPJPARQUE, COORDENADAS, DATA),
	CONSTRAINT FK1_PONTOESTRUTURA
		FOREIGN KEY(IDESTRUTURACAO)
		REFERENCES ESTRUTURACAO
		ON DELETE RESTRICT,
	CONSTRAINT FK2_PONTOESTRUTURA
		FOREIGN KEY(CNPJPARQUE, COORDENADAS)
		REFERENCES PONTOINSTALACAO
		ON DELETE RESTRICT,
	CONSTRAINT CK_PONTOESTRUTURA /* Ao menos uma estrutura deve ter sido instalada. */
		CHECK(QUANTIDADE > 0)
);

CREATE TABLE PONTOSOM(
	IDSONORIZACAO BIGINT,
	CNPJPARQUE CHAR(18),
	COORDENADAS INTEGER[3],
	DATA DATE,
	QUANTIDADE INTEGER NOT NULL,
	NUMEROGRAFO INTEGER,
	CONSTRAINT PK_PONTOSOM
		PRIMARY KEY(IDSONORIZACAO, CNPJPARQUE, COORDENADAS, DATA),
	CONSTRAINT FK1_PONTOSOM
		FOREIGN KEY(IDSONORIZACAO)
		REFERENCES SONORIZACAO
		ON DELETE RESTRICT,
	CONSTRAINT FK2_PONTOSOM
		FOREIGN KEY(CNPJPARQUE, COORDENADAS)
		REFERENCES PONTOINSTALACAO
		ON DELETE RESTRICT,
	CONSTRAINT CK1_PONTOSOM /* Deve haver no mínimo 1 equipamento sonoro instalado. */
		CHECK(QUANTIDADE > 0),
	CONSTRAINT CK2_PONTOSOM /* A contagem do número do grafo se inicia em 1. */
		CHECK(NUMEROGRAFO > 0)
);

CREATE TABLE OPERA(
	CNPJPARQUE CHAR(18),
	DATAFESTA DATE,
	CPFPILOTO CHAR(14),
	IDDRONE BIGINT NOT NULL,
	CONSTRAINT PK_OPERA
		PRIMARY KEY(CNPJPARQUE, DATAFESTA, CPFPILOTO),
	CONSTRAINT FK1_OPERA
		FOREIGN KEY(CNPJPARQUE, DATAFESTA)
		REFERENCES FESTANOPARQUE
		ON DELETE RESTRICT,
	CONSTRAINT FK2_OPERA
		FOREIGN KEY(CPFPILOTO)
		REFERENCES PILOTO
		ON DELETE RESTRICT,
	CONSTRAINT FK3_OPERA
		FOREIGN KEY(IDDRONE)
		REFERENCES DRONE
		ON DELETE RESTRICT
);

CREATE TABLE AUXILIA(
	CNPJPARQUE CHAR(18),
	DATAFESTA DATE,
	CPFPILOTO CHAR(14),
	CPFCOPILOTO CHAR(14) NOT NULL,
	CONSTRAINT PK_AUXILIA
		PRIMARY KEY(CNPJPARQUE, DATAFESTA, CPFPILOTO),
	CONSTRAINT UN_AUXILIA
		UNIQUE(CPFCOPILOTO),
	CONSTRAINT FK1_AUXILIA
		FOREIGN KEY(CNPJPARQUE, DATAFESTA)
		REFERENCES FESTANOPARQUE
		ON DELETE RESTRICT,
	CONSTRAINT FK2_AUXILIA
		FOREIGN KEY(CPFPILOTO)
		REFERENCES PILOTO
		ON DELETE RESTRICT,
	CONSTRAINT FK3_AUXILIA
		FOREIGN KEY(CPFCOPILOTO)
		REFERENCES COPILOTO
		ON DELETE RESTRICT
);

CREATE TABLE MANUTENCAO(
	CPFTECNICO CHAR(14),
	IDEQUIPAMENTO BIGINT,
	DATA DATE,
	CONSTRAINT PK_MANUTENCAO
		PRIMARY KEY(CPFTECNICO, IDEQUIPAMENTO, DATA),
	CONSTRAINT FK1_MANUTENCAO
		FOREIGN KEY(CPFTECNICO)
		REFERENCES TECNICO
		ON DELETE RESTRICT,
	CONSTRAINT FK2_MANUTENCAO
		FOREIGN KEY(IDEQUIPAMENTO)
		REFERENCES EQUIPAMENTO
		ON DELETE RESTRICT
);

END TRANSACTION;